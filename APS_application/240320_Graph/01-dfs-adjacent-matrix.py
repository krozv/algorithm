# 1. 그래프를 코드로 표현
# - 인접 행렬
# - 인접 리스트
# - 연결 리스트 -> 몇 개 연결될 지 잘 모름 -> 그래프에서 사용 지양
# 인접 행렬
    # V x V 배열을 활용해서 표현
    # 갈 수 없다면 0, 있다면 1(or 가중치)을 저장
    # 장점
        # 노드 간 연결 정보를 한 번에 확인 가능(탐색 용이)
        # 간선이 많을수록 유리
        # 행렬곱을 이용해서 탐색이 쉽게 가능함
    # 단점
        # 노드 수가 커지면 메모리가 낭비된다
        # 연결이 안된 것도 저장하기 때문
        # 메모리 제한 있는 문제 2000 * 2000 행렬에서 터짐
        # 메모리 제한, 노드 수 반드시 확인!!
# 양 방향 그래프
    # 우하단 대각선 기준으로 대칭

graph = [
    [0, 1, 0, 1, 0],
    [1, 0, 1, 0, 1],
    [0, 1, 0, 0, 0],
    [1, 0, 0, 0, 1],
    [0, 1, 0, 1, 0],
]
# DFS - recrusion
visited = [0] * 5
def dfs(now):
    # 기저 조건: 언제까지 재귀가 돌아야 하는가
        # 지금 문제에선 기저 조건 없음
    # 다음 재귀 호출 전
    visited[now] = 1
    print(now, end=' ')
    # 다음 재귀 호출
    # dfs: 현재 노드에서 다른 노드들을 확인
    for to in range(5):
        # 갈 수 없다면 pass
        if graph[now][to] == 0:
            continue
        # 이미 방문했다면 pass
        if visited[to]:
            continue

        dfs(to)
    # 돌아왔을 때 작업

dfs(0)

